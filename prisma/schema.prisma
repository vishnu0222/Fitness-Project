// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName      String
  lastName      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
   // Challenges this user created // One-to-many relationship
  createdChallenges Challenge[]      @relation("ChallengeCreator")
  // Challenges this user has joined// One-to-many relationship
  participations     ChallengeEnrollment[]
  // Workout plans created by this user //One-to-many relationship
  workoutPlans       WorkoutPlan[] 
}

model Challenge {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  image      String?
  startDate   DateTime
  endDate     DateTime
  // Who created it
  creator      User                     @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    Int

  // Whoâ€™s in it // One-to-many relationship
  participants ChallengeEnrollment[]

  createdAt    DateTime     @default(now())
}

model ChallengeEnrollment {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  challenge    Challenge    @relation(fields: [challengeId], references: [id])
  challengeId  Int

  joinedAt     DateTime     @default(now())
  progress     Float?       // e.g. percent complete

  @@unique([userId, challengeId])
}

model WorkoutPlan {
  id Int @id @default(autoincrement())
  title String
  userId Int
  user User @relation(fields : [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workoutSplits WorkoutSplit[]
  @@index([userId])
}

model WorkoutSplit {
  id Int @id @default(autoincrement())
  planId Int 
  plan WorkoutPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  workoutSplitName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  exercises Exercises[]
  @@index([planId])
}

model Exercises {
  id Int @id @default(autoincrement())
  exerciseName String
  sets Int
  splitId Int
  split WorkoutSplit @relation(fields: [splitId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}